
FAIL eval with plain string with Trusted Types and permissive CSP throws (no type). assert_throws_js: function "_ => {
      eval('a="hello there"');
    }" did not throw
FAIL indirect eval with plain string with Trusted Types and permissive CSP throws (no type). assert_throws_js: function "_ => {
      eval?.('a="hello there"');
    }" did not throw
FAIL Function constructor with plain string with Trusted Types and permissive CSP throws (no type). assert_throws_js: function "_ => {
      new Function('a="hello there"');
    }" did not throw
PASS eval with TrustedScript and permissive CSP works.
PASS indirect eval with TrustedScript and permissive CSP works.
PASS new Function with TrustedScript and permissive CSP works.
FAIL eval with default policy and permissive CSP still obeys default policy. assert_equals: expected "Hello a cat untrusted string" but got "Hello transformed untrusted string"
FAIL indirect eval with default policy and permissive CSP still obeys default policy. assert_equals: expected "Hello a cat untrusted string" but got "Hello transformed untrusted string"
FAIL new Function with default policy and permissive CSP still obeys default policy. assert_equals: expected "Hello a cat untrusted string" but got "Hello transformed untrusted string"

