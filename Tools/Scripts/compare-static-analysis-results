#!/usr/bin/env python3
# Copyright (C) 2024 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import subprocess
import argparse
import json

CHECKERS = ['NoUncountedMemberChecker', 'RefCntblBaseVirtualDtor', 'UncountedCallArgsChecker', 'UncountedLocalVarsChecker']
PROJECTS = ['WebCore', 'WebKit']


def parser():
    parser = argparse.ArgumentParser(description='Finds new regressions and fixes between two smart pointer static analysis results')
    parser.add_argument(
        'new_dir',
        help='Path to directory of results from new build'
    )
    parser.add_argument(
        '--archived-dir',
        dest='archived_dir',
        help='Path to directory of previous results for comparison'
    )
    parser.add_argument(
        '--build-output',
        dest='build_output',
        help='Path to the static analyzer output from the new build',
    )
    parser.add_argument(
        '--scan-build-path',
        dest='scan_build',
        help='Path to scan-build executable'
    )
    parser.add_argument(
        '--check-expectations',
        dest='check_expectations',
        action='store_true',
        default=False,
        help='Compare new results to expectations (instead of a previous run)'
    )
    return parser.parse_args()


def find_diff(args, file1, file2):
    if not args.check_expectations:
        # Create empty file if the corresponding one doesn't exist - this happens if a checker is added or removed
        if not os.path.exists(file1):
            f = open(file1, 'a')
            f.close()
        if not os.path.exists(file2):
            f = open(file2, 'a')
            f.close()

    with open(file1) as baseline_file, open(file2) as new_file:
        baseline_list = baseline_file.read().splitlines()
        new_file_list = new_file.read().splitlines()
        # Find new regressions
        diff_new_from_baseline = set(new_file_list) - set(baseline_list)
         # Find fixes
        diff_baseline_from_new = set(baseline_list) - set(new_file_list)

    return set(diff_new_from_baseline), set(diff_baseline_from_new)


def create_filtered_results_dir(args, project, issues, category='StaticAnalyzerRegressions'):
    # Create symlinks to new issues only so that we can run scan-build to generate new index.html files
    path_to_reports = os.path.abspath(f'{args.build_output}/{category}/{project}/StaticAnalyzerReports')
    subprocess.run(['mkdir', '-p', path_to_reports])
    for issue_hash in issues:
        report = f"report-{issue_hash[:6]}.html"
        path_to_report = f'{args.build_output}/StaticAnalyzer/{project}/StaticAnalyzerReports/{report}'
        path_to_report_new = os.path.join(path_to_reports, report)
        subprocess.run(['ln', '-s', os.path.abspath(path_to_report), path_to_report_new])

    path_to_project = f'{args.build_output}/{category}/{project}'
    subprocess.run([args.scan_build, '--generate-index-only', os.path.abspath(path_to_project)])


def compare_project_results_to_expectations(args, new_path, project):
    unexpected_issues_total = set()
    unexpected_buggy_files = set()
    unexpected_clean_files = set()

    # Compare the list of dirty files to the expectations list of files
    for checker in CHECKERS:
        # Get unexpected clean and buggy files per checker
        buggy_files, clean_files = find_diff(args, os.path.abspath(f'Source/{project}/{checker}Expectations.txt'), f'{new_path}/{project}/{checker}-files.txt')
        unexpected_clean_files.update(clean_files)
        unexpected_buggy_files.update(buggy_files)

        # Get unexpected issues per checker
        unexpected_issues = set()
        with open(f'{new_path}/issues_per_file.json') as f:
            issues_per_file = json.load(f)
        for file_name in buggy_files:
            unexpected_issues.update(issues_per_file[checker][file_name])
        unexpected_issues_total.update(unexpected_issues)

        with open(f'{new_path}/{project}/UnexpectedCleanFiles{checker}.txt', 'a') as f:
            f.write('\n'.join(clean_files))
        with open(f'{new_path}/{project}/UnexpectedFailedFiles{checker}.txt', 'a') as f:
            f.write('\n'.join(buggy_files))
        with open(f'{new_path}/{project}/UnexpectedIssues{checker}.txt', 'a') as f:
            f.write('\n'.join(unexpected_issues))

        print(f'{checker}:')
        print(f'    Unexpected passing files: {len(clean_files)}')
        print(f'    Unexpected failing files: {len(buggy_files)}')
        print(f'    Unexpected issues: {len(unexpected_issues)}\n')

    if unexpected_issues_total and args.scan_build:
        create_filtered_results_dir(args, project, unexpected_issues_total, 'StaticAnalyzerUnexpectedRegressions')
    return unexpected_buggy_files, unexpected_clean_files, unexpected_issues_total


def compare_project_results_by_run(args, archive_path, new_path, project):
    new_issues_total = set()
    new_files_total = set()
    fixed_issues_total = set()
    fixed_files_total = set()

    for checker in CHECKERS:
        print(f'{checker}:')
        new_issues, fixed_issues = find_diff(args, f'{archive_path}/{checker}-issues', f'{new_path}/{project}/{checker}-issues.txt')
        new_files, fixed_files = find_diff(args, f'{archive_path}/{checker}-files', f'{new_path}/{project}/{checker}-files.txt')
        fixed_issues_total.update(fixed_issues)
        fixed_files_total.update(fixed_files)
        new_issues_total.update(new_issues)
        new_files_total.update(new_files)

        print(f'    Issues fixed: {len(fixed_issues)}')
        print(f'    Files fixed: {len(fixed_files)}')
        print(f'    New issues: {len(new_issues)}')
        print(f'    New files with issues: {len(new_files)}\n')

    if new_issues_total and args.scan_build:
        create_filtered_results_dir(args, project, new_issues_total, 'StaticAnalyzerRegressions')

    return new_issues_total, new_files_total


def main():
    args = parser()
    new_issues_total = set()
    new_files_total = set()
    unexpected_passes_total = set()
    unexpected_failures_total = set()
    unexpected_issues_total = set()

    for project in PROJECTS:
        print(f'\n------ {project} ------\n')
        new_path = os.path.abspath(f'{args.new_dir}')
        if args.check_expectations:
            unexpected_failures, unexpected_passes, unexpected_issues = compare_project_results_to_expectations(args, new_path, project)
            unexpected_failures_total.update(unexpected_failures)
            unexpected_passes_total.update(unexpected_passes)
            unexpected_issues_total.update(unexpected_issues)
        else:
            archive_path = os.path.abspath(f'{args.archived_dir}/{project}')
            new_issues, new_files = compare_project_results_by_run(args, archive_path, new_path, project)
            new_issues_total.update(new_issues)
            new_files_total.update(new_files)

    print('\n')
    for type, type_total in {
        'new issues': new_issues_total,
        'new files': new_files_total,
        'unexpected failing files': unexpected_failures_total,
        'unexpected passing files': unexpected_passes_total,
        'unexpected issues': unexpected_issues_total
    }.items():
        if type_total:
            print(f'Total {type}: {len(type_total)}')

    return 0


if __name__ == '__main__':
    main()
